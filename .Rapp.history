install.packages("httpgd")
library(countrycode)#
library(dplyr)#
library(reshape2)#
library(readxl)#
library(tidyr)#
library(stringr)
getwd()
setwd("./Documents/rotacoster_fireB/")
parent_dir <- "./input/select_coutnry"#
#
# Get all top-level folders inside results_2025#
top_folders <- list.dirs(parent_dir, recursive = FALSE, full.names = TRUE)
parent_dir <- "./input/select_country"
top_folders <- list.dirs(parent_dir, recursive = FALSE, full.names = TRUE)
top_folders
parent_dir <- "./input/country_select"
top_folders <- list.dirs(parent_dir, recursive = FALSE, full.names = TRUE)
top_folders
all_files <- list()
all_files <- list()
doses_files <- list()  # Create a list for files with '_doses'
for (folder in top_folders) {
for (folder in top_folders) {#
  subdirs <- list.dirs(folder, recursive = FALSE, full.names = TRUE)#
  if (length(subdirs) == 0 || all(subdirs == folder)) {#
    # Flat structure: use folder name as column, list files directly#
    folder_name <- basename(folder)#
    files <- list.files(folder, full.names = FALSE)#
    # Store all files (including '_tpop.csv' files) in all_files#
    all_files[[folder_name]] <- files[!grepl("_doses", files)]  # Exclude '_doses' files#
    # Store files with '_doses' separately#
    doses_files[[folder_name]] <- files[grepl("_doses", files)]#
    # Store population files ending with '_tpop.csv'#
    #population_files[[folder_name]] <- files[grepl("_tpop.csv$", files)]#
  } else {#
    # Nested structure: each subfolder becomes a column#
    for (subdir in subdirs) {#
      subdir_name <- basename(subdir)#
      files <- list.files(subdir, full.names = FALSE)#
      # Store all files (including '_tpop.csv' files) in all_files#
      all_files[[subdir_name]] <- files[!grepl("_doses", files)]  # Exclude '_doses' files#
      # Store files with '_doses' separately#
      doses_files[[subdir_name]] <- files[grepl("_doses", files)]#
    }#
  }#
}
doses_files
# Normalize list lengths by padding with NAs for all files (including '_tpop.csv' files)#
max_len <- max(sapply(all_files, length))#
all_files_padded <- lapply(all_files, function(x) c(x, rep(NA, max_len - length(x))))#
#
# Combine into data frame for all files (excluding '_doses' files)#
df_all_files <- as.data.frame(all_files_padded, stringsAsFactors = FALSE)#
#
# Normalize list lengths by padding with NAs for doses files#
max_len_doses <- max(sapply(doses_files, length))#
doses_files_padded <- lapply(doses_files, function(x) c(x, rep(NA, max_len_doses - length(x))))#
#
# Combine into data frame for '_doses' files#
df_doses_files <- as.data.frame(doses_files_padded, stringsAsFactors = FALSE)#
df_doses_files<- df_doses_files %>% select(-c(novacc, population))#
#
# MS cases #
df_ms_only <- df_all_files %>%#
  mutate(across(everything(), ~ ifelse(grepl("_MS\\.csv$", .), ., NA)))#
#
# Remove rows where all columns are NA#
df_ms_only <- df_ms_only %>%#
  filter(if_any(everything(), ~ !is.na(.)))%>% #
  select(-population)#
# NS cases#
df_ns_only <- df_all_files %>%#
  mutate(across(everything(), ~ ifelse(grepl("_NS\\.csv$", .), ., NA)))#
#
# Remove rows where all columns are NA#
df_ns_only <- df_ns_only %>%#
  filter(if_any(everything(), ~ !is.na(.))) %>% #
  select(-population)#
#
# CODE -----------------------------------------------------------------------# #
data_list<- list(df_doses_files, df_ms_only, df_ns_only)
data_list
})
data_list<- lapply(data_list, function(data){#
  data$Country<- gsub("_[^_]+$", "", data[,1])#
  # Convert country name to ISO3#
  data <- data %>%#
    mutate(iso = countrycode(Country, origin = 'country.name.en', destination = 'genc3c'))#
  data$iso[data$Country=="Republic_of_the_Congo"]<- "COG"#
  data$iso[data$Country=="Palestine"]<- "PSE"#
  return(data)#
  })
data_list
data.long.list<- lapply(data_list, function(data){#
  data.long<- pivot_longer(data, -c(iso, Country), #
                                values_to = "Value", names_to = "Scenario")
data.long.list
data_list
View(data_list)
head(data_list)
head(data_list)
data_list[[1]]
head(data_list[[1]])
data.long<- pivot_longer(data_list[[2]], -c(iso, Country), #
                                values_to = "Value", names_to = "Scenario")
data.long
unique(data.long$Scenario)
parent_dir <- "./input/country_select"#
#
# Get all top-level folders inside results_2025#
top_folders <- list.dirs(parent_dir, recursive = FALSE, full.names = TRUE)#
#
# Prepare a list to collect results#
all_files <- list()#
doses_files <- list()  # Create a list for files with '_doses'#
#
for (folder in top_folders) {#
  subdirs <- list.dirs(folder, recursive = FALSE, full.names = TRUE)#
  if (length(subdirs) == 0 || all(subdirs == folder)) {#
    # Flat structure: use folder name as column, list files directly#
    folder_name <- basename(folder)#
    files <- list.files(folder, full.names = FALSE)#
    # Store all files (including '_tpop.csv' files) in all_files#
    all_files[[folder_name]] <- files[!grepl("_doses", files)]  # Exclude '_doses' files#
    # Store files with '_doses' separately#
    doses_files[[folder_name]] <- files[grepl("_doses", files)]#
    # Store population files ending with '_tpop.csv'#
    #population_files[[folder_name]] <- files[grepl("_tpop.csv$", files)]#
  } else {#
    # Nested structure: each subfolder becomes a column#
    for (subdir in subdirs) {#
      subdir_name <- basename(subdir)#
      files <- list.files(subdir, full.names = FALSE)#
      # Store all files (including '_tpop.csv' files) in all_files#
      all_files[[subdir_name]] <- files[!grepl("_doses", files)]  # Exclude '_doses' files#
      # Store files with '_doses' separately#
      doses_files[[subdir_name]] <- files[grepl("_doses", files)]#
    }#
  }#
}#
#
# Normalize list lengths by padding with NAs for all files (including '_tpop.csv' files)#
max_len <- max(sapply(all_files, length))#
all_files_padded <- lapply(all_files, function(x) c(x, rep(NA, max_len - length(x))))#
#
# Combine into data frame for all files (excluding '_doses' files)#
df_all_files <- as.data.frame(all_files_padded, stringsAsFactors = FALSE)#
#
# Normalize list lengths by padding with NAs for doses files#
max_len_doses <- max(sapply(doses_files, length))#
doses_files_padded <- lapply(doses_files, function(x) c(x, rep(NA, max_len_doses - length(x))))#
#
# Combine into data frame for '_doses' files#
df_doses_files <- as.data.frame(doses_files_padded, stringsAsFactors = FALSE)#
df_doses_files<- df_doses_files %>% select(-c(novacc, population))#
#
# MS cases #
df_ms_only <- df_all_files %>%#
  mutate(across(everything(), ~ ifelse(grepl("_MS\\.csv$", .), ., NA)))#
#
# Remove rows where all columns are NA#
df_ms_only <- df_ms_only %>%#
  filter(if_any(everything(), ~ !is.na(.)))%>% #
  select(-population)#
# NS cases#
df_ns_only <- df_all_files %>%#
  mutate(across(everything(), ~ ifelse(grepl("_NS\\.csv$", .), ., NA)))#
#
# Remove rows where all columns are NA#
df_ns_only <- df_ns_only %>%#
  filter(if_any(everything(), ~ !is.na(.))) %>% #
  select(-population)#
#
# CODE -----------------------------------------------------------------------# #
data_list<- list(df_doses_files, df_ms_only, df_ns_only)#
#
data_list<- lapply(data_list, function(data){#
  data$Country<- gsub("_[^_]+$", "", data[,1])#
  # Convert country name to ISO3#
  data <- data %>%#
    mutate(iso = countrycode(Country, origin = 'country.name.en', destination = 'genc3c'))#
  data$iso[data$Country=="Republic_of_the_Congo"]<- "COG"#
  data$iso[data$Country=="Palestine"]<- "PSE"#
  return(data)#
  })
data.long<- pivot_longer(data_list[[2]], -c(iso, Country), #
                                values_to = "Value", names_to = "Scenario")
unique(data.long$Scenario)
data.long.list<- lapply(data_list, function(data){#
  data.long<- pivot_longer(data, -c(iso, Country), #
                                values_to = "Value", names_to = "Scenario")#
  data.long = data.long %>% #
    mutate(#
      dose_information_Intro = case_when(#
      	str_detect(Scenario, "all_1_6_10") ~  "Neonatal_1/6/10",#
        str_detect(Scenario, "all_1_10_14") ~ "Neonatal_1/10/14",#
        str_detect(Scenario, "all_uses_2_dose_plus_40") ~ "RV_6/10/40",#
        str_detect(Scenario, "all_6_10") ~ "RV_6/10",#
        str_detect(Scenario, "all_6_10_14") ~ "RV_6/10/14",#
        str_detect(Scenario, "all_10_14") ~  "RV_10/14",#
        str_detect(Scenario, "current") ~  "Keep_current",#
        str_detect(Scenario, "suspend_vac") ~ "N/A"),#
      dose_information_NVax = case_when(#
      	str_detect(Scenario, "all_1_6_10") ~  "Neonatal_1/6/10",#
        str_detect(Scenario, "all_1_10_14") ~ "Neonatal_1/10/14",#
        str_detect(Scenario, "all_uses_2_dose_plus_40") ~ "RV_6/10/40",#
        str_detect(Scenario, "all_6_10") ~ "RV_6/10",#
        str_detect(Scenario, "all_6_10_14") ~ "RV_6/10/14",#
        str_detect(Scenario, "all_10_14") ~  "RV_10/14",#
        str_detect(Scenario, "current") ~  "N/A",#
        str_detect(Scenario, "suspend_vac") ~ "N/A"),#
      severity = gsub(".*_(.*)\\.csv$", "\\1",  data.long$Value),#
      #Countries with vaccine use their current rotavirus coverage, while countries without vaccine use their current DPT coverage (curr_cov_novac_dpt_cov). Scale up coverage to 95% for all countries (curr_cov_novac_95_cov).#
      coverage = case_when(#
        str_detect(Scenario, "cov_50") ~ "50%",#
        str_detect(Scenario, "cov_60") ~ "60%",#
        str_detect(Scenario, "cov_70") ~ "70%",#
        str_detect(Scenario, "cov_80") ~ "80%",#
        str_detect(Scenario, "cov_90") ~ "90%",#
        str_detect(Scenario, "cov_95") ~ "95%",#
        str_detect(Scenario, "cov_curr") ~ "current_coverage",#
        str_detect(Scenario, "suspend_vac") ~ "0%",#
        TRUE ~ NA#
      )#
    )#
  data.long<- data.long %>% rename(ISO = iso)#
  return(data.long)#
})
data.long
head(data.long)
